README 1ST
-----------------------------------------------------------------------------
Documentation sections:

  * Using Docker with shell scripts provided
  * Using Docker manually
  * Running the application natively
  * Interacting with the app

This application (notes) is built to run either with Docker or natively. 
Before running with Docker, the application needs to be built and Docker must
be installed in the operating system. To run the application natively, Python3,
pip, flask, and flask_restful must be installed.

Using Docker with shell scripts provided
========================================
To build the image   :  ./build.sh
To run the image     :  ./run.sh <port>
To stop the container:  ./stop.sh

  * Note: <port> defaults to 5000

Using Docker manually
=====================
To build the image manually: docker build -t <imagename> .
To run the image manually:
  docker run -p 5000:5000 -P --name <imagename> \
   -d dsanders/<imagename> /bin/bash -c /notes/startup.sh
To stop the image manually: 
  docker stop <imagename>
  docker rm -f <imagename> # allows imagename to be reused

Running the application natively
================================
To run the app manually: python3 [install path]/runserver.py
  * where install path is the path to the top notes/ directory
To stop the app manually: ^c

Interacting with the app
========================
All interaction with the app (which runs as a web server) is via HTTP. In Linux
the best approach is to use CURL, as follows:

  1 - List all operations supported, using HATEOAS approach (Hypertext as the
      engine of application state)

        curl <hostname>:<port>/notifications

  2 - List all notifications

        curl <hostname>:<port>/notifications

  3 - Add a new notification

        curl -X POST -H "Content-Type: application/json" \
        -d '{"note":"The notification text", "action":"Description of ation"}' \
        <hostname>:<port>/notification

  4 - Get an existing notification

        curl <hostname>:<port>/notification/9 # Where 9 is the notification id.

  5 - Update an existing notification

        curl -X PUT -H "Content-Type: application/json" \
        -d '{"note":"The notification text", "action":"Description of ation"}' \
        <hostname>:<port>/notification/9 # Where 9 is the notification id.

  6 - Check the device's lock status

        curl <hostname>:<port>/lock

  7 - Lock the device

        curl -X PUT <hostname>:<port>/lock

  8 - Unlock the device

        curl -X PUT <hostname>:<port>/unlock/1234 # 1234 is the unlock code

