README 1ST
-----------------------------------------------------------------------------
Documentation sections:

  * Using Docker with shell scripts provided
  * Using Docker manually
  * Running the application natively
  * Interacting with the app
  * Running test scripts

This application (notes) is built to run either with Docker or natively. 
Before running with Docker, the application needs to be built and Docker must
be installed in the operating system. 

To run the application natively, the following must be installed (based on 
Ubuntu 14.04):

  Dependency         Guide Command (depends upon version)
  ----------------------------------------------------------------
  * git              sudo apt-get install git
  * Python3          should be installed in 14.04
  * pip3             sudo apt-get install python3-pip
  * flask            sudo pip3 install flask
  * flask_restful    sudo pip3 install flask-restful (NOTE HYPEN!)
  * marshmallow      sudo pip3 install marshmallow
  * sqlite3          sudo apt-get install sqlite3


Using Docker with shell scripts provided
========================================
To build the image      : bin/build.sh
To run a single image   : bin/run.sh <port>
To run multiple images  : bin/create.sh <no_of_containers>
To stop an image        : bin/stop.sh <port>
To stop multiple images : bin/destroy.sh <no_of_containers>

  * Notes: 1. <port> defaults to 5000
           2. create/destroy start at port 5000 and increment for each
              container

bin/create.sh:
--------------
Creates x containers named notes5000 through notes50099. Can be used to create
any number of containers. no_of_containers is any number, default is 100. After
the containers are created, any commands (e.g. free) can be executed.

bin/destroy.sh:
---------------
Destroys the x containers created in bin/create.sh


Using Docker manually
=====================
To build the image manually: docker build -t <imagename> .
To run the image manually:

  docker run -p <port>:<port> --name notesfinal<port> \
    -e portToUse=<port> \
    -v $PWD/datavol:/notes/datavol \
    -d dsanders/notesfinal /bin/bash -c '/notes/startup.sh'

To stop the image manually: 
  docker stop notesfinal<port>
  docker rm -f notesfinal<port> # allows imagename to be reused


Running the application natively
================================
There are two choices to running the application locally - 1, UWSGI can be used
locally; and 2, runlocal.py can be used.

1. To run the app using UWSGI: 
   Step 1 - edit notes_final.ini and change CHDIR to the correct location
   Step 2 - navigate to the install directory .../.../notes-final/
   Step 3 - excute the following command: ./runlocal.sh

2. To run the app using Python3
   Step 1 - execute the command: python3 runlocal.py

Interacting with the app
========================
All interaction with the app (which runs as a web server) is via HTTP. In Linux
the best approach is to use CURL, as follows:

  1 - List all routes
      (i.e. HATEOAS - Hypertext as the engine of application state)

      curl <hostname>:<port>/

  2 - List all notifications

      curl <hostname>:<port>/notifications

  3 - Add a new notification

      curl -X POST -H "Content-Type: application/json" \
        -d '{"note":"The notification text", "action":"Description of ation"}' \
        <hostname>:<port>/notification

  4 - Get an existing notification

      curl <hostname>:<port>/notification/9

  5 - Update an existing notification

      curl -X PUT -H "Content-Type: application/json" \
        -d '{"note":"The notification text", "action":"Description of ation"}' \
        <hostname>:<port>/notification/9

  6 - Check the device's lock status

      curl <hostname>:<port>/lock

  7 - Lock the device

      curl -X PUT <hostname>:<port>/lock

  8 - Unlock the device

      curl -X PUT <hostname>:<port>/unlock/1234 # 1234 is the unlock code

  9 - Set the app mode (see runserver.py)

      curl -X PUT http://<hostname>:<port>/mode/9 (where 9 is 1, 2, or 3)


Running Test Scripts
====================
The test program is test/tests.py
Run the program for instructions: python test/tests.py http://<host>:<port>/

