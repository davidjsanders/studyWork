#!/usr/bin/python3
# Import 
# Reference: 
# Argparse Tutorial - https://docs.python.org/2/howto/argparse.html#id1
#
# Import argpars to parse command line arguments
import argparse

# Import text wrapping module
import textwrap

# Import requests, sys, json, and pprint for http methods and formatting #
import requests
import sys
import json
from pprint import pprint
from Links import Link_Schema, Link_Collection, Link

# Import Marshmallow for schema loading #
from marshmallow import Schema, fields, post_load

# Import jsonschema validator
from jsonschema import validate

# Import CMD
from cmd2 import Cmd

# Class definitions
class Server(object):
    def __init__(
        self,
        server_name='http://localhost:5000/v1_00/'
    ):
        self.server_name = server_name

    def __repr__(self):
        return self.server_name

# Global variables
interactive = False
server = None
g_links = Link_Collection()

# Class definition for cmd2
class App(Cmd):

    def do_print(self, line):
        print ('{0}'.format(line))

    def do_server(self, line):
        global server
        server = Server(line)
        self.prompt = str(server)+' >> '

    def do_close(self, line):
        global server
        server = None
        self.prompt = str(server)+' >> '

    def do_get(self, line):
        get(line)

    def do_head(self, line):
        header(line)

    def do_routes(self, line):
        fetch_routes(line)

def fetch_routes(command):
    try:
        global server
        global g_links

        args = command.split()
        verbose = False
        if len(args) > 0:
            if args[0] == '--verbose':
                verbose = True
                print('Set verbose')
            else:
                raise Exception('correct usage: routes <--verbose>, '+\
                                 'where <--verbose> displays full details.')

        result = requests.get(server.server_name)

        if not result.status_code == 200\
        or 'error' in result.json():
            raise Exception('The server issued a bad response.')

        if '_links' in result.json()['success']['data']:
            g_links.parse_links(result.json()['success']['data']['_links'])
            for link in g_links.links:
                print(json.dumps(link))
        else:
            raise ValueError('No links were found at the root address:')

    except ValueError as e:
        print('{0} {1}'.format(e, server.server_name))
    except Exception as e:
        print('error. '+str(e))

def print_route_header(verbosity):
    if verbosity:
        pass
    else:
        print('\033[4m{0:3s} {1:20s} {2:28s} {3:25s}\033[0m'.format(
              ' ID', 'Route Name', 'Description', 'Methods Allowed'
        ))
#        print('{0}'.format('='*80))

def print_route_footer(verbosity):
    print()

def print_route(link, verbosity):
    if verbosity:
        pass
    else:
        print_route_table(link, verbosity)

def print_route_table(link, verbosity):
    name = textwrap.wrap(link.name, width=20)
    description = textwrap.wrap(link.description, width=28)
#    href = textwrap.wrap(link.href, width=25)
    href = []
    allow = textwrap.wrap(link.headers['allow'], width = 25)

    sizes = [len(name), len(description), len(href), len(allow)]
    max_size = max(sizes)
    underline_counter = max_size - 1

    counter = 0
    while True:
        if counter == max_size:
            break

        name_print = ''
        description_print = ''
        href_print = ''
        allow_print = ''
        if counter == 0:
            identifier = str(link.identifier).rjust(3, ' ')
        else:
            identifier = ''

        try:
            if counter < len(name):
                name_print = name[counter]
            if counter < len(description):
                description_print = description[counter]
            if counter < len(href):
                href_print = href[counter]
            if counter < len(allow):
                allow_print = allow[counter]
            print('{0:3s} {1:20s} {2:28s} {3:25s}'.format(
                identifier
               ,name_print
               ,description_print
               ,allow_print
            ))
        except Exception as e:
            print('error: '+repr(e))
        counter += 1

#    print('{0}'.format('-'*80))

    return

def fetch_route(command):
    try:
        args = command.split()
        if len(args) < 2:
            raise ValueError('correct usage: route <route>, where <route> '+\
                             'is a number.')
    except ValueError as e:
        print(e)
    except Exception as e:
        print('error. '+str(e))

def header(command):
    try:
        args = command.split()
        if len(args) < 1 or len(args) > 1:
            raise Exception('correct usage: '+args[0]+' <route>, where <route> '+\
                             'is a number.')

        route = int(args[0])
        if route < 0:
            raise ValueError("The route cannot be less than zero.")
        elif route > len(g_links):
            raise IndexError("The route doesn't exist. Have you run routes?")

        print()
        headers = g_links[route].headers
        for header_item in headers:
            print('{0:20s} {1}'.format(header_item, headers[header_item]))
        print()
    except Exception as e:
        print('error. '+str(e))

def get(command):
    try:
        args = command.split()
        if len(args) < 1:
            raise Exception('correct usage: get <route>, where <route> '+\
                             'is a number.')

        content_to_find = None
        if len(args) > 1:
            content_to_find = str(args[1])

        route = int(args[0])
        if route < 0:
            raise ValueError("The route cannot be less than zero.")
        elif route > len(g_links):
            raise IndexError("The route doesn't exist. Have you run routes?")
        if not 'GET' in g_links[route].headers['allow']:
            raise Exception('HTTP 405 - This route does not support GET')

        result = requests.get(g_links[route].href)
        if not result.status_code == 200:
            raise Exception('HTTP {0}'.format(result.status_code))
        elif not 'json' in result.headers['content-type']:
            raise Exception('Expected JSON data but did not receive it.')

        print()
        headers = result.headers
        for header_item in headers:
            print('{0:20s} {1}'.format(header_item, headers[header_item]))
        print()

        data_set = result.json()
        data_keys = data_set.keys()

        if not content_to_find == None:
            if not content_to_find in data_set:
                key_string = ""
                for key in data_set.keys():
                    key_string = key_string + key + ','
                raise Exception('Content "'+content_to_find+ \
                                '" does not exist. Possible choices are '+ \
                                'one of: [' + \
                                key_string + ']')
            if type(data_set[content_to_find]) is dict:
                print('Data')
                print('-'*80)
                for key in data_set[content_to_find]:
                    if key != '_links':
                        print('{0:30s}: {1}' \
                              .format(key, data_set[content_to_find][key]))
                print()
                print('Links')
                print('-'*80)
                for key in data_set[content_to_find]['_links']:
                    print('{0:30s}: {1}'.format(key, data_set[content_to_find]['_links'][key]))
            else:
                pprint(data_set)
        else:
            print('Keys')
            print('-'*80)
            for key in data_keys:
               print('{0}'.format(key))
        print()

    except Exception as e:
        print('error. '+str(e))

def help(server):
    print()
    print('options')
    print()
    print('help - execute this command')
    print('routes - list all routes available from root server {0}' \
          .format(server.server_name))
    print('get <route> - get (curl -X GET) the route identified '+ \
          'by <route> returning keys in dictionary items, otherwise ' +\
          'the values.')
    print('get <route> <key> - get (curl -X GET) the route identified '+\
          'by <route> and <key>')
    print('put <route> <key> - put (curl -X PUT) the route identified by <route>')
    print('post <route> - post (curl -X POST) the route identified by <route>')
    print('delete <route> - post (curl -X DELETE) the route '+\
          'identified by <route>')
    print('head <route> - show the header and options for <route>')
    print()

if __name__ == '__main__':
    App.prompt = ' >> '
    App.intro = 'Command line microservice interpreter. Remember to '+\
                    'set the server using: server <servername>'

    App().cmdloop()
