from marshmallow_jsonapi import Schema, fields
import marshmallow

# https://marshmallow-jsonapi.readthedocs.org/en/latest/quickstart.html#declaring-schemas
def dasherize(text):
    return text.replace('_','-')

class Notification_List(object):

    def __init__(self):
        self.notification_list = []

    def __repr__(self):
        return 'There are {0} notifications'.format(
                   str(len(self.notification_list)))

    def append(self, notification):
        if type(notification) != Notification:
            raise ValueError
        self.notification_list.append(notification)

    def iter_items(self):
        for note in self.notification_list:
            yield note.id, note

    def clear_items(self):
        self.notification_list = []

class Notification(object):

    def __init__(self
                ,note=None
                ,action=None
                ,sensitivity=None
                ,marshalled_data=None):
        self.id = -1
        self.related = [{'id':123, 'url':'http://www.msn.ca'},{'id':234}]
        if marshalled_data == None:
            self.note = note
            self.action = action
            self.sensitivity = sensitivity
        else:
            if type(marshalled_data) != marshmallow.schema.UnmarshalResult:
                print('Bad data type -> '+repr(type(marshalled_data)))
                return None
            self.note = marshalled_data.data['note']
            self.action = marshalled_data.data['action']
            self.sensitivity = marshalled_data.data['sensitivity']

    def __repr__(self):
        return 'Notification(<id={self.id!r})>'.format(self=self)

    def iter_fields(self):
        yield "ID", self.id
        yield "note", self.note
        yield "action", self.action
        yield "sensitivity", self.sensitivity

class Notification_Schema(Schema):
    id = fields.Str(dump_only=True)
    note = fields.Str()
    action = fields.Str()
    sensitivity = fields.Str()

    related = fields.Relationship(
        self_url='{server}/notification/{id}',
        self_url_kwargs={'id': '<id>', 'server':'http://localhost:5000'},
        related_url='{server}/notifications/',
        related_url_kwargs={'server':'http://localhost:5000'},
#        many=True, include_data=True,
#        type_='Notification'
    )

    class Meta:
        type_ = 'Notification'
        strict = True
        inflect = dasherize
