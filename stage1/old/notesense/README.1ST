README 1ST
-----------------------------------------------------------------------------
Documentation sections:

  * Using Docker with shell scripts provided
  * Using Docker manually
  * Running the application natively
  * Interacting with the app
  * Running test scripts

This application (notes) is built to run either with Docker or natively. 
Before running with Docker, the application needs to be built and Docker must
be installed in the operating system. 

To run the application natively, the following must be installed (based on 
Ubuntu 14.04):

  Dependency         Guide Command (depends upon version)
  ----------------------------------------------------------------
  * git              sudo apt-get install git
  * Python3          should be installed in 14.04
  * pip3             sudo apt-get install python3-pip
  * flask            sudo pip3 install flask
  * flask_restful    sudo pip3 install flask-restful (NOTE HYPEN!)


Using Docker with shell scripts provided
========================================
To build the image      : bin/build.sh
To run a single image   : bin/run.sh <port>
To run multiple images  : bin/create.sh <no_of_containers>
To stop an image        : bin/stop.sh <port>
To stop multiple images : bin/destroy.sh <no_of_containers>

  * Note: <port> defaults to 5000

bin/create.sh:
--------------
Creates x containers named notes5000 through notes50099. Can be used to create
any number of containers. no_of_containers is any number, default is 100. After
the containers are created, any commands (e.g. free) can be executed.

bin/destroy.sh:
---------------
Destroys the x containers created in bin/create.sh


Using Docker manually
=====================
To build the image manually: docker build -t <imagename> .
To run the image manually:
  docker run -p 5000:5000 -P --name <imagename> \
   -d dsanders/<imagename> /bin/bash -c /notes/startup.sh
To stop the image manually: 
  docker stop <imagename>
  docker rm -f <imagename> # allows imagename to be reused


Running the application natively
================================
To run the app manually: python3 [install path]/runserver.py
  * where install path is the path to the top notes/ directory
To stop the app manually: ^c


Interacting with the app
========================
All interaction with the app (which runs as a web server) is via HTTP. In Linux
the best approach is to use CURL, as follows:

  1 - List all operations supported, using HATEOAS approach (Hypertext as the
      engine of application state)

        curl <hostname>:<port>/notifications

  2 - List all notifications

        curl <hostname>:<port>/notifications

  3 - Add a new notification

        curl -X POST -H "Content-Type: application/json" \
        -d '{"note":"The notification text", "action":"Description of ation"}' \
        <hostname>:<port>/notification

  4 - Get an existing notification

        curl <hostname>:<port>/notification/9 # Where 9 is the notification id.

  5 - Update an existing notification

        curl -X PUT -H "Content-Type: application/json" \
        -d '{"note":"The notification text", "action":"Description of ation"}' \
        <hostname>:<port>/notification/9 # Where 9 is the notification id.

  6 - Check the device's lock status

        curl <hostname>:<port>/lock

  7 - Lock the device

        curl -X PUT <hostname>:<port>/lock

  8 - Unlock the device

        curl -X PUT <hostname>:<port>/unlock/1234 # 1234 is the unlock code


Running Test Scripts
====================
There is one initial test script provided:

  * test/test.sh <port>

test/test.sh: 
-------------
expects a running environment already up and running (see above). Tests are 
executed to:

  1. clear the notification history
  2. list the HTTP routes
  3. post a notification
  4. post a notification
  5. get the first (0) notification
  6. get the second (1) notificaiton
  7. list all notifications
  8. list the possible actions (as per 2 but notice the different results)
  9. get the first (0) notification
 10. update notification 0, set the note to have the text "updated: " added.
 11. get the first (0) notification
 12. lock the device
 13. list all notifications
 14. unlock the device
 15. list all notifications
 16. badly formed update to notification 0
 17. badly formed update to notification 0
 18. update a non-existent notification
